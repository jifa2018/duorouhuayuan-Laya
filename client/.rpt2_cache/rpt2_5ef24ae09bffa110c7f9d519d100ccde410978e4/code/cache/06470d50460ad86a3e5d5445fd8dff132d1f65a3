{
  "code": "var Tween = Laya.Tween;\r\nvar Handler = Laya.Handler;\r\nimport GameScene from \"./scene/GameScene\";\r\nimport MouseController from \"./script/MouseController\";\r\nimport { CommonDefine } from \"../common/CommonDefine\";\r\nimport { SceneManager } from \"../manager/SceneManager\";\r\nimport ViewScene from \"./scene/ViewScene\";\r\nimport { GameUIManager } from \"../manager/GameUIManager\";\r\nexport class CameraAnimation {\r\n    constructor() {\r\n        this.inView = false;\r\n        this.durationTime = 600;\r\n        Laya.stage.on(CommonDefine.EVENT_CLICK_TARGET, this, this.beginView);\r\n        Laya.stage.on(CommonDefine.EVENT_ROLL_BACK, this, this.endView);\r\n        Laya.stage.on(CommonDefine.EVENT_ROLL_SCREEN, this, this.rollScreen);\r\n    }\r\n    beginView() {\r\n        GameUIManager.instance.openUI(\"LoadingScene\");\r\n        SceneManager.instance.openScene(ViewScene.instance);\r\n        Laya.stage.event(CommonDefine.EVENT_BEGIN_VIEW);\r\n        return;\r\n        if (this.isMoving || this.nearView)\r\n            return;\r\n        console.log(\"beginview!!\");\r\n        Laya.stage.event(CommonDefine.EVENT_BEGIN_VIEW);\r\n        this.isMoving = true;\r\n        var camera = GameScene.instance.camera;\r\n        this.mouseScript = camera.getComponent(MouseController);\r\n        this.mouseScript.moveEnable = false;\r\n        this.mouseScript.rotateEnable = true;\r\n        this.mouseScript.scaleEnable = true;\r\n        this.position = camera.transform.position.clone();\r\n        this.rotate = camera.parent.transform.rotationEuler.clone();\r\n        this.rotation = camera.parent.transform.rotation.clone();\r\n        this.test = camera.transform.rotation.clone();\r\n        this.camera = camera;\r\n        console.log(\"--position\");\r\n        console.log(this.position);\r\n        console.log(\"--parent rotation\");\r\n        console.log(this.rotation);\r\n        console.log(\"--rotation\");\r\n        console.log(this.test);\r\n        this.qu = camera.transform.worldMatrix.clone();\r\n        var cameraNode = GameScene.instance.getScene().getChildByName(\"Camera_node\");\r\n        var pos = cameraNode.transform.position.clone();\r\n        var rot = cameraNode.transform.rotationEuler.clone();\r\n        this.size = camera.orthographicVerticalSize;\r\n        Tween.to(this.camera.transform.position, { x: pos.x, y: pos.y, z: pos.z, update: new Handler(this, function () {\r\n                this.camera.transform.position = this.camera.transform.position;\r\n            }) }, this.durationTime);\r\n        Tween.to(this.camera.parent.transform.rotationEuler, { x: rot.x, y: rot.y, z: rot.z, update: new Handler(this, function () {\r\n                this.camera.transform.rotationEuler = this.camera.transform.rotationEuler;\r\n            }) }, this.durationTime);\r\n        Tween.to(this.camera, { orthographicVerticalSize: 5 }, this.durationTime, null, new Handler(this, function () {\r\n            this.nearView = true;\r\n            this.isMoving = false;\r\n        }));\r\n    }\r\n    endView() {\r\n        SceneManager.instance.openScene(GameScene.instance);\r\n        Laya.stage.event(CommonDefine.EVENT_END_VIEW);\r\n        return;\r\n        if (this.isMoving)\r\n            return;\r\n        Laya.stage.event(CommonDefine.EVENT_END_VIEW);\r\n        this.isMoving = true;\r\n        this.mouseScript.moveEnable = true;\r\n        this.mouseScript.rotateEnable = false;\r\n        this.mouseScript.scaleEnable = false;\r\n        Tween.to(this.camera.transform.position, { x: this.position.x, y: this.position.y, z: this.position.z, update: new Handler(this, function () {\r\n                this.camera.transform.position = this.camera.transform.position;\r\n            }) }, this.durationTime, null, Handler.create(this, function () {\r\n            console.log(\"position\");\r\n            console.log(this.camera.transform.position);\r\n        }));\r\n        if (this.camera.parent.transform.rotation.x != this.rotation.x || this.camera.parent.transform.rotation.y != this.rotation.y ||\r\n            this.camera.parent.transform.rotation.z != this.rotation.z || this.camera.parent.transform.rotation.w != this.rotation.w) {\r\n            Tween.to(this.camera.parent.transform.rotation, { x: this.rotation.x, y: this.rotation.y, z: this.rotation.z, w: this.rotation.w, update: new Handler(this, function () {\r\n                    this.camera.parent.transform.rotation = this.camera.parent.transform.rotation;\r\n                }) }, this.durationTime, null, Handler.create(this, function () {\r\n                console.log(\"parent rotation\");\r\n                console.log(this.camera.parent.transform.rotation);\r\n            }));\r\n            Tween.to(this.camera.transform.rotation, { x: this.test.x, y: this.test.y, z: this.test.z, w: this.test.w, update: new Handler(this, function () {\r\n                    this.camera.transform.rotation = this.camera.transform.rotation;\r\n                }) }, this.durationTime, null, Handler.create(this, function () {\r\n                console.log(\"rotation\");\r\n                console.log(this.camera.transform.rotation);\r\n            }));\r\n        }\r\n        Tween.to(this.camera, { orthographicVerticalSize: this.size }, this.durationTime, null, new Handler(this, function () {\r\n            this.nearView = false;\r\n            this.isMoving = false;\r\n            console.log(\"---------------  orthographicVerticalSize\");\r\n            console.log(this.camera.orthographicVerticalSize);\r\n        }));\r\n    }\r\n    rollScreen(direction, camera) {\r\n        if (direction == \"right\" && GameScene.instance.canMove(\"right\")) {\r\n            Tween.to(camera.transform.position, { x: 7.93, update: new Handler(this, function () {\r\n                    camera.transform.position = camera.transform.position;\r\n                }) }, 200);\r\n        }\r\n        else if (direction == \"left\" && GameScene.instance.canMove(\"left\")) {\r\n            Laya.stage.event(CommonDefine.EVENT_BEGIN_ROLL);\r\n            Tween.to(camera.transform.position, { x: -3.91, update: new Handler(this, function () {\r\n                    camera.transform.position = camera.transform.position;\r\n                }) }, 200);\r\n        }\r\n    }\r\n}\r\n",
  "references": [
    "E:/project/duorou/client/src/game/scene/GameScene.ts",
    "E:/project/duorou/client/src/game/script/MouseController.ts",
    "E:/project/duorou/client/src/common/CommonDefine.ts",
    "E:/project/duorou/client/src/manager/SceneManager.ts",
    "E:/project/duorou/client/src/game/scene/ViewScene.ts",
    "E:/project/duorou/client/src/manager/GameUIManager.ts"
  ]
}
