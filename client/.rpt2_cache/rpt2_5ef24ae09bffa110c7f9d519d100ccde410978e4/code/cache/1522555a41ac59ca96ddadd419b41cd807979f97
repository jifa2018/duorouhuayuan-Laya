{
  "code": "var Sprite3D = Laya.Sprite3D;\r\nvar MeshSprite3D = Laya.MeshSprite3D;\r\nvar SkinnedMeshSprite3D = Laya.SkinnedMeshSprite3D;\r\nvar Vector3 = Laya.Vector3;\r\nvar Vector4 = Laya.Vector4;\r\nvar LocalStorage = Laya.LocalStorage;\r\nexport class Utils {\r\n    static setMeshCastShadow(sprite3d, bool) {\r\n        let childNum = sprite3d.numChildren;\r\n        for (let i = 0; i < childNum; ++i) {\r\n            var node = sprite3d.getChildAt(i);\r\n            if (node instanceof MeshSprite3D || node instanceof SkinnedMeshSprite3D || node instanceof Sprite3D) {\r\n                if (node.meshRenderer) {\r\n                    node.meshRenderer.castShadow = bool;\r\n                    node.meshRenderer.receiveShadow = bool;\r\n                }\r\n                if (node.skinnedMeshRenderer) {\r\n                    node.skinnedMeshRenderer.castShadow = bool;\r\n                    node.skinnedMeshRenderer.receiveShadow = bool;\r\n                }\r\n            }\r\n            if (node.numChildren > 0)\r\n                Utils.setMeshCastShadow(node, bool);\r\n        }\r\n    }\r\n    static setModelAlpha(sprite3d, alpha) {\r\n        var childNum = sprite3d.numChildren;\r\n        for (let i = 0; i < childNum; ++i) {\r\n            var node = sprite3d.getChildAt(i);\r\n            if (node instanceof MeshSprite3D || node instanceof SkinnedMeshSprite3D || node instanceof Sprite3D) {\r\n                if (node.meshRenderer) {\r\n                    if (node.meshRenderer.material) {\r\n                        node.meshRenderer.material.renderMode = 2;\r\n                        node.meshRenderer.material.albedoColor = new Vector4(node.meshRenderer.material.albedoColor.x, node.meshRenderer.material.albedoColor.y, node.meshRenderer.material.albedoColor.z, alpha);\r\n                    }\r\n                }\r\n                if (node.skinnedMeshRenderer) {\r\n                    if (node.skinnedMeshRenderer.material) {\r\n                        node.skinnedMeshRenderer.material.renderMode = 2;\r\n                        node.skinnedMeshRenderer.material.albedoColor = new Vector4(node.skinnedMeshRenderer.material.albedoColor.x, node.skinnedMeshRenderer.material.albedoColor.y, node.skinnedMeshRenderer.material.albedoColor.z, alpha);\r\n                    }\r\n                }\r\n            }\r\n            if (node.numChildren > 0)\r\n                Utils.setModelAlpha(node, alpha);\r\n        }\r\n    }\r\n    static createBloom(camera, param) {\r\n        var postProcess = new Laya.PostProcess();\r\n        var bloom = new Laya.BloomEffect();\r\n        postProcess.addEffect(bloom);\r\n        for (var o in param) {\r\n            bloom[o] = param[o];\r\n        }\r\n        Laya.Texture2D.load(\"res/image/DR_shitou.png\", Laya.Handler.create(this, function (tex) {\r\n            bloom.dirtTexture = tex;\r\n            bloom.dirtIntensity = 2.0;\r\n            camera.postProcess = postProcess;\r\n        }));\r\n        return postProcess;\r\n    }\r\n    static screenToWorld(mousePos, camera, height = 0.3, distance = -1) {\r\n        function getLowerLeft(transform, distance, width, height) {\r\n            var lowerLeft = new Laya.Vector3();\r\n            var right = new Laya.Vector3();\r\n            transform.getRight(right);\r\n            Laya.Vector3.normalize(right, right);\r\n            var xx = new Laya.Vector3(right.x * width, right.y * width, right.z * width);\r\n            Laya.Vector3.add(transform.position, xx, lowerLeft);\r\n            var up = new Laya.Vector3();\r\n            transform.getUp(up);\r\n            Laya.Vector3.normalize(up, up);\r\n            var yy = new Laya.Vector3(up.x * height, up.y * height, up.z * height);\r\n            Laya.Vector3.subtract(lowerLeft, yy, lowerLeft);\r\n            var forward = new Laya.Vector3();\r\n            transform.getForward(forward);\r\n            Laya.Vector3.normalize(forward, forward);\r\n            var zz = new Laya.Vector3(forward.x * distance, forward.y * distance, forward.z * distance);\r\n            Laya.Vector3.subtract(lowerLeft, zz, lowerLeft);\r\n            return lowerLeft;\r\n        }\r\n        function getScreenScale(width, height) {\r\n            var v = new Laya.Vector3();\r\n            v.x = Laya.stage.width / width / 2;\r\n            v.y = Laya.stage.height / height / 2;\r\n            return v;\r\n        }\r\n        function inverseTransformPoint(origin, point) {\r\n            var xx = new Laya.Vector3();\r\n            origin.getRight(xx);\r\n            var yy = new Laya.Vector3();\r\n            origin.getUp(yy);\r\n            var zz = new Laya.Vector3();\r\n            origin.getForward(zz);\r\n            var zz1 = new Laya.Vector3(-zz.x, -zz.y, -zz.z);\r\n            var x = projectDistance(point, origin.position, xx);\r\n            var y = projectDistance(point, origin.position, yy);\r\n            var z = projectDistance(point, origin.position, zz1);\r\n            var value = new Laya.Vector3(x, y, z);\r\n            return value;\r\n        }\r\n        function transformPoint(origin, point) {\r\n            var value = new Laya.Vector3();\r\n            Laya.Vector3.transformQuat(point, origin.rotation, value);\r\n            Laya.Vector3.add(value, origin.position, value);\r\n            return value;\r\n        }\r\n        function projectDistance(A, C, B) {\r\n            var CA = new Laya.Vector3();\r\n            Laya.Vector3.subtract(A, C, CA);\r\n            var angle = angle2(CA, B) * Math.PI / 180;\r\n            var distance = Laya.Vector3.distance(A, C);\r\n            distance *= Math.cos(angle);\r\n            return distance;\r\n        }\r\n        function angle2(ma, mb) {\r\n            var v1 = (ma.x * mb.x) + (ma.y * mb.y) + (ma.z * mb.z);\r\n            var ma_val = Math.sqrt(ma.x * ma.x + ma.y * ma.y + ma.z * ma.z);\r\n            var mb_val = Math.sqrt(mb.x * mb.x + mb.y * mb.y + mb.z * mb.z);\r\n            var cosM = v1 / (ma_val * mb_val);\r\n            if (cosM < -1)\r\n                cosM = -1;\r\n            if (cosM > 1)\r\n                cosM = 1;\r\n            var angleAMB = Math.acos(cosM) * 180 / Math.PI;\r\n            return angleAMB;\r\n        }\r\n        function intersectWithLineANdPlane(linePoint, lineDirection, planeNormal, planePoint) {\r\n            var v1 = new Vector3();\r\n            Vector3.subtract(planePoint, linePoint, v1);\r\n            var d = Vector3.dot(v1, planeNormal)\r\n                / Vector3.dot(lineDirection, planeNormal);\r\n            var v2 = new Vector3();\r\n            Vector3.scale(lineDirection, d, v2);\r\n            var v3 = new Vector3();\r\n            Vector3.add(linePoint, v2, v3);\r\n            return v3;\r\n        }\r\n        function getPos(camera, screenPos) {\r\n            var halfFOV = (camera.fieldOfView * 0.5) * Math.PI / 180;\r\n            let height = screenPos.z * Math.tan(halfFOV);\r\n            let width = height * camera.aspectRatio;\r\n            let lowerLeft = getLowerLeft(camera.transform, screenPos.z, width, height);\r\n            let v = getScreenScale(width, height);\r\n            var value = new Vector3();\r\n            var lowerLeftA = inverseTransformPoint(camera.transform, lowerLeft);\r\n            value = new Vector3(-screenPos.x / v.x, screenPos.y / v.y, 0);\r\n            Laya.Vector3.add(lowerLeftA, value, value);\r\n            value = transformPoint(camera.transform, value);\r\n            return value;\r\n        }\r\n        var screenPosition = new Vector3(mousePos.x, mousePos.y, 1);\r\n        var worldPostion = getPos(camera, screenPosition);\r\n        Vector3.subtract(worldPostion, camera.transform.position, Utils.rayDirection);\r\n        Vector3.normalize(Utils.rayDirection, Utils.rayDirection);\r\n        var myPosition = intersectWithLineANdPlane(camera.transform.position, Utils.rayDirection, new Vector3(0, 1, 0), new Vector3(0, height, 0));\r\n        if (distance != -1) {\r\n            var myPosition2 = new Vector3(myPosition.x, 0, myPosition.z);\r\n            var length = Vector3.scalarLengthSquared(myPosition2);\r\n            var maxLength = distance;\r\n            if (length > maxLength * maxLength) {\r\n                var myPosition3 = new Vector3();\r\n                Vector3.normalize(myPosition2, myPosition3);\r\n                var myPosition4 = new Vector3();\r\n                Vector3.scale(myPosition3, maxLength, myPosition3);\r\n                myPosition = new Vector3(myPosition3.x, myPosition.y, myPosition3.z);\r\n            }\r\n        }\r\n        return myPosition;\r\n    }\r\n    static saveStringToLocal(key, value) {\r\n        LocalStorage.setItem(key, value);\r\n    }\r\n    static getStringFromLocal(key) {\r\n        return LocalStorage.getItem(key);\r\n    }\r\n    static saveJSONToLocal(key, value) {\r\n        LocalStorage.setJSON(key, value);\r\n    }\r\n    static getJSONFromLocal(key) {\r\n        return LocalStorage.getJSON(key);\r\n    }\r\n    static clearLocalByKey(key) {\r\n        LocalStorage.removeItem(key);\r\n    }\r\n    static clearLocal() {\r\n        LocalStorage.clear();\r\n    }\r\n}\r\nUtils.rayDirection = new Vector3();\r\n",
  "references": []
}
